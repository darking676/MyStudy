
public class day05 {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		/*
		 * 20180212

jdk 
jde

실수의 연산을 피한다.
필요하다면 정수로 바꾸어 계산하고 실수로 바꾼다.

윈도우의 개행 \r\n

switch문의 경우 과거 버전에는 string이 안된다.

break; switch나 반복문에서 탈출
continue  반복문에서의 사용, 밑의 코드를 실행하지 않고 최상단으로 이동
차이는 반복문을 끝까지 실행하느냐 중간에 실행하지 않고 나가느냐


/*메서드 사용법
public static [자료형||void] 메서드이름(인자){실행문;}



*
  public static void func01(int b,int c){
	System.out.println(b+c+" func01 run..");
	//return; 생략된다.
  }
====================================================
class Ex06{
  public static void main(String[] args){

	int a=100;
	System.out.println(a);
	func01();
	func01(100);	
	System.out.println(a);
  }//main end

  public static void func01(){
	int a=1;
	func02(100);
	System.out.println(a);
	//return;
  }//func01 end

  public static void func01(int b){
	int a=1;
	func02(100);
	System.out.println(a+"\t"+b);
	//return;
  }//func01 end


  public static void func02(int a){
	System.out.println("func02 run"+a);
	//return;
  }//func02 end

  
}//class end
===========================================================
메소드의 인자에 따라 다른 메서드가 실행된다. == 메서드 오버로드
또한 인자의 자료형 void인지 int인지 구분할 수 없다.











		 */

	}

}
